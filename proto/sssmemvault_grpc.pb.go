// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// source: proto/sssmemvault.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SssMemVault_List_FullMethodName       = "/sssmemvault.SssMemVault/List"
	SssMemVault_Get_FullMethodName        = "/sssmemvault.SssMemVault/Get"
	SssMemVault_GetDecoded_FullMethodName = "/sssmemvault.SssMemVault/GetDecoded"
	SssMemVault_Push_FullMethodName       = "/sssmemvault.SssMemVault/Push"
)

// SssMemVaultClient is the client API for SssMemVault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for node-to-node communication
type SssMemVaultClient interface {
	// List available keys and their latest timestamps
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Get the full signed entry for a specific key and timestamp
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Get the decrypted SSS fragment for the calling node, if authorized
	GetDecoded(ctx context.Context, in *GetDecodedRequest, opts ...grpc.CallOption) (*GetDecodedResponse, error)
	// Push a new entry, signed by the master key (bypasses peer auth)
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
}

type sssMemVaultClient struct {
	cc grpc.ClientConnInterface
}

func NewSssMemVaultClient(cc grpc.ClientConnInterface) SssMemVaultClient {
	return &sssMemVaultClient{cc}
}

func (c *sssMemVaultClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, SssMemVault_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sssMemVaultClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, SssMemVault_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sssMemVaultClient) GetDecoded(ctx context.Context, in *GetDecodedRequest, opts ...grpc.CallOption) (*GetDecodedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDecodedResponse)
	err := c.cc.Invoke(ctx, SssMemVault_GetDecoded_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sssMemVaultClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, SssMemVault_Push_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SssMemVaultServer is the server API for SssMemVault service.
// All implementations must embed UnimplementedSssMemVaultServer
// for forward compatibility.
//
// Service definition for node-to-node communication
type SssMemVaultServer interface {
	// List available keys and their latest timestamps
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Get the full signed entry for a specific key and timestamp
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Get the decrypted SSS fragment for the calling node, if authorized
	GetDecoded(context.Context, *GetDecodedRequest) (*GetDecodedResponse, error)
	// Push a new entry, signed by the master key (bypasses peer auth)
	Push(context.Context, *PushRequest) (*PushResponse, error)
	mustEmbedUnimplementedSssMemVaultServer()
}

// UnimplementedSssMemVaultServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSssMemVaultServer struct{}

func (UnimplementedSssMemVaultServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSssMemVaultServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSssMemVaultServer) GetDecoded(context.Context, *GetDecodedRequest) (*GetDecodedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDecoded not implemented")
}
func (UnimplementedSssMemVaultServer) Push(context.Context, *PushRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedSssMemVaultServer) mustEmbedUnimplementedSssMemVaultServer() {}
func (UnimplementedSssMemVaultServer) testEmbeddedByValue()                     {}

// UnsafeSssMemVaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SssMemVaultServer will
// result in compilation errors.
type UnsafeSssMemVaultServer interface {
	mustEmbedUnimplementedSssMemVaultServer()
}

func RegisterSssMemVaultServer(s grpc.ServiceRegistrar, srv SssMemVaultServer) {
	// If the following call pancis, it indicates UnimplementedSssMemVaultServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SssMemVault_ServiceDesc, srv)
}

func _SssMemVault_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SssMemVaultServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SssMemVault_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SssMemVaultServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SssMemVault_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SssMemVaultServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SssMemVault_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SssMemVaultServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SssMemVault_GetDecoded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecodedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SssMemVaultServer).GetDecoded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SssMemVault_GetDecoded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SssMemVaultServer).GetDecoded(ctx, req.(*GetDecodedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SssMemVault_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SssMemVaultServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SssMemVault_Push_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SssMemVaultServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SssMemVault_ServiceDesc is the grpc.ServiceDesc for SssMemVault service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SssMemVault_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sssmemvault.SssMemVault",
	HandlerType: (*SssMemVaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SssMemVault_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SssMemVault_Get_Handler,
		},
		{
			MethodName: "GetDecoded",
			Handler:    _SssMemVault_GetDecoded_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _SssMemVault_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sssmemvault.proto",
}
